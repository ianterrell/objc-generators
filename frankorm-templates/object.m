//
//  <%= object.name %>.m
//  <%= @project_name %>
//
//  Generated by <%= @author %> on <%= Date.today.strftime("%m/%d/%Y") %>.
//  Copyright <%= Date.today.strftime("%Y") %> <%= @author %>. All rights reserved.
//

#import "<%= object.name %>.h"
#import "Frank.h"
<% object.class_includes.each do |c| -%>
#import "<%= c %>.h"
<% end -%>


@implementation <%= object.name %>

@synthesize <%= object.field_names.join(', ') %>;
<% unless object.belongs_tos.empty? -%>
@synthesize <%= object.belongs_tos.map{|x|"_#{x[:name]}"}.join(', ') %>;
<% end -%>
<% unless object.has_manies.empty? -%>
@synthesize <%= object.has_manies.map{|x|"_#{x[:name]}"}.join(', ') %>;
<% end -%>

<% object.methods.each do |method| -%>
<%= method[:signature] %> {
<%= method[:code] %>
}
<% end -%>

#pragma mark Create and Update

+(NSString *)tableName {
  return @"<%= object.table_name %>";
}

-(BOOL)save {
  NSString *sql = nil;
  if ([self isNewRecord])
    sql = @"INSERT INTO <%= object.table_name %> (<%= object.field_names.map{|x| x.underscore}.join(', ') %>) VALUES (<%= object.field_names.map{|x|'?'}.join(', ') %>);";
  else
    sql = [NSString stringWithFormat:@"UPDATE <%= object.table_name %> SET <%= object.field_names.map{|x|"#{x.underscore} = ?"}.join(', ') %> WHERE pk = %d;", [pk intValue]];

  FMDatabase *db = [Frank sharedDatabase];
  BOOL success = [db executeUpdate:sql, <%= object.field_names.map{|x|x.camelize(:lower)}.join(', ') %>];
  if (success)
    self.pk = [FrankObject lastInsertRowId];
  return success;
}

#pragma mark Relationships

<% object.belongs_tos.each do |field| -%>
-(<%= field[:type] %>)<%= field[:name] %> {
  if (<%= field[:fk] %> == nil)
    return nil;
  else if (_<%= field[:name] %> == nil)
    _<%= field[:name] %> = [<%= field[:type].gsub(' *','') %> findByPk:<%= field[:fk] %>];
  return _<%= field[:name] %>;
}

-(<%= field[:type] %>)<%= field[:name] %>WithReload {
  if (<%= field[:fk] %> == nil)
    return nil;
  _<%= field[:name] %> = [<%= field[:type].gsub(' *','') %> findByPk:<%= field[:fk] %>];
  return _<%= field[:name] %>;
}

-(void)set<%= field[:name].camelize %>:(<%= field[:type] %>)obj {
  <%= field[:fk] %> = [obj pk];
  [_<%= field[:name] %> release];
  [obj retain];
  _<%= field[:name] %> = obj;
}

<% end -%>
<% object.has_manies.each do |field| -%>
-(NSArray *)<%= field[:name] %> {
  if (_<%= field[:name] %> == nil)
    _<%= field[:name] %> = [<%= field[:type].gsub(' *','').singularize %> findWhere:@"<%= field[:fk] %> = ?", pk];
  return _<%= field[:name] %>;
}

-(NSArray *)<%= field[:name] %>WithReload {
  _<%= field[:name] %> = [<%= field[:type].gsub(' *','').singularize %> findWhere:@"<%= field[:fk] %> = ?", pk];
  return _<%= field[:name] %>;
}

-(int)<%= field[:name] %>Count {
  if (_<%= field[:name] %> == nil)
    return [<%= field[:type].gsub(' *','').singularize %> countWhere:@"<%= field[:fk] %> = ?", pk];
  return [_<%= field[:name] %> count];
}

<% end -%>
#pragma mark Helper Methods


+(id)buildFromResultSetRow:(FMResultSet *)rs {
  <%= object.name.camelize %> *<%= object.name.camelize(:lower) %> = [<%= object.name.camelize %> alloc];
  <%= object.name.camelize(:lower) %>.pk = [NSNumber numberWithInt:[rs intForColumn:@"pk"]];
<% object.fields.each do |field| -%>
  <%= object.name.camelize(:lower) %>.<%= field[:name] %> = <%= FrankObject.fmdb_column_value(field[:type], field[:name].underscore) %>;
<% end -%>
  return [<%= object.name.camelize(:lower) %> autorelease];
}

#pragma mark Boilerplate

- (void)dealloc {
<% object.fields.each do |field| -%>
  [<%= field[:name] %> release];
<% end -%>
<% object.belongs_tos.each do |field| -%>
  [_<%= field[:name] %> release];
<% end -%>
<% object.has_manies.each do |field| -%>
  [_<%= field[:name] %> release];
<% end -%>
	[super dealloc];
}

@end